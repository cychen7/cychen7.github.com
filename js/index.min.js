"use strict";function init(){$.ajax({url:"dev/workExperience.json",type:"Get",success:function(t){createItem(t)},dataType:"json",error:function(t,e,a){console.log(e)}})}function createItem(t){if(t&&t.length>0){var e='<li><a href="#workAt<%=workstart%>" role="tab" data-toggle="tab"><%=workYear%></a><i class="fa fa-circle"></i></li>',a='\n     <div class="tab-pane" id="workAt<%=workstart%>">\n       <div class="company-duty">\n         <h2 class="company"><%=company%><small><%=start%>--<%=end%>[<%=workDuration%>]</small></span></h2>\n         <span><i class="fa fa-hand-o-right"></i>&nbsp;<%=post%></span>\n         <div class="dutys"><%=jobDuties%></div>\n       </div>\n       <%=items%>\n     </div>\n     ';t=_.orderBy(t,"end"),console.log(t),_.each(t,function(t){var n=moment(t.start),o=moment(t.end),r=moment.duration(o.diff(n)),s=_.template(e)({workstart:n.format("YYYYMM"),workYear:n.year()}),c=renderItem(t.projectItems),i=_.template(a)({workstart:n.format("YYYYMM"),company:t.company,start:n.format("YYYY/MM"),end:o.format("YYYY/MM"),workDuration:r.get("years")+"年"+r.get("months")+"个月",post:t.post,jobDuties:t.jobDuties,items:c});$("#workExperience .work-nav").append(s),$("#workExperience .tab-content").append(i)}),$("#workExperience .work-nav>li:last-child,#workExperience .tab-pane:last-child").addClass("active")}}function renderItem(t){t=_.orderBy(t,"startDate","desc");var e='<div class="item" style="border-left-color:<%=randomColor%>;">\n    <p class="project-name" style="color: <%=randomColor%>"><%=projectName%><small><%=startDate%>--<%=endDate%></small></p>\n    <p>运行环境: <%=runEnvironment%></p>\n    <p>开发工具: <%=devTools%></p>\n    <div class="desc"><%=projectDesc%></div>\n    <div class="duty-desc"><%=duty%></div>\n  </div>',a="";return _.each(t,function(t){moment(t.startDate),moment(t.endDate);a+=_.template(e)({projectName:t.projectName,startDate:t.startDate,endDate:t.endDate,runEnvironment:t.runEnvironment,devTools:t.devTools,projectDesc:t.projectDesc,duty:t.duty,randomColor:getRandomColor()})}),a}$(function(){init()});var getRandomColor=function(){return"#"+("00000"+(16777216*Math.random()<<0).toString(16)).slice(-6)};
//# sourceMappingURL=data:application/json;base64,
